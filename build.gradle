// Top-level build file where you can add configuration options common to all sub-projects/modules.
//
//

buildscript {
    repositories {
        def networkIsOk = false; // 网络不好设为false，手动配置Android Studio安装目录下的maven仓库路径
        if (networkIsOk) {
            jcenter()
            println("networkIsOk=" + networkIsOk + ", use jcenter()")
        } else {
            def androidStudioM2ReositoryPath = "C:\\Android\\Android Studio\\gradle\\m2repository" // Windows 注意修改成自己本地的 Android Studio 安装路径
            // url gradle.gradleHomeDir.absolutePath + "/../m2repository"
            // url "/Applications/Android Studio.app/Contents/gradle/m2repository" // Mac OS X
            println("networkIsOk=" + networkIsOk + ", use Android Studio m2repository, path=" + androidStudioM2ReositoryPath)
            maven {
                url androidStudioM2ReositoryPath
            }
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

// =================== testmyapp ===================

apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "org.eurstein.test.myapp"
        minSdkVersion 7
        targetSdkVersion 22
        versionCode 100000
        versionName "1.0.0"
        // Enabling multidex support.
        // http://developer.android.com/tools/building/multidex.html
        // http://developer.android.com/tools/support-library/features.html#multidex
        multiDexEnabled true
    }

    signingConfigs {
        debugSigningConfig {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    productFlavors {
        // Define separate dev and prod product flavors.
        dev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21 // 每一个引用的外部jar包都将单独生成一个dex文件
        }
        prod {
            // The actual minSdkVersion for the application.
            minSdkVersion 7
        }
    }

    buildTypes {
        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            signingConfig signingConfigs.debugSigningConfig
        }
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // http://stackoverflow.com/questions/32153318/httpclient-wont-import-in-android-studio
    // useLibrary 'org.apache.http.legacy'

    lintOptions {
        abortOnError false
    }

    // http://stackoverflow.com/questions/13439882/android-error-in-eclipse-unable-to-execute-dex-cannot-merge-new-index-65799-i
    dexOptions {
        jumboMode = false
        javaMaxHeapSize '2g'
        preDexLibraries = false
    }

    // http://stackoverflow.com/questions/17583126/how-to-tell-gradle-to-use-a-different-androidmanifest-from-the-command-line
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['sdk_support', 'connector', 'common', 'main', 'src']
            res.srcDirs = ['res']
            aidl.srcDirs = ['sdk_support', 'connector', 'common']
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['assets']
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:multidex:1.0.0'
}

// Google 分包方案
// http://developer.android.com/tools/building/multidex.html
// http://developer.android.com/tools/support-library/features.html#multidex
// 
// 1. multiDexEnabled true
// 2. compile 'com.android.support:multidex:1.0.0'
// 3. 源代码做如下修改(让 application 继承M ultiDexApplication，或者在attachBaseContext中增加 MultiDex.install(this) )
//   改法1 
//   +import android.support.multidex.MultiDex; 
//
//
//       protected void attachBaseContext(Context base) {
//           super.attachBaseContext(base);
//   +       MultiDex.install(this);
//           loadDex(this);
//      }
//
//   改法2
//   +import android.support.multidex.MultiDexApplication;
//
//   -public class AstApp extends Application
//   +public class AstApp extends MultiDexApplication
// 4. 增加一下代码
afterEvaluate {
    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        if (dx.additionalParameters == null) {
            dx.additionalParameters = []
        }
        dx.additionalParameters += '--multi-dex' // 可选
        dx.additionalParameters += '--minimal-main-dex' // 关键，没有这个不会进行分包。
        // 工程目录下的main_dex_filelist列表没有同步更新，存在问题，直接交给gradle/dex默认处理
        // dx.additionalParameters += "--main-dex-list=$projectDir/main_dex_filelist".toString() // 指定主dex包含的类。
        // PS: 1.双引号表示取$projectDir的值；2.在没有指定的情况下，可以在build/intermediates/multi-dex/中查看默认的主dex类列表
    }
}
